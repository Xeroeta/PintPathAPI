service: swiftmile

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-multiple-responses

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

package:
  exclude:
    - CognitoUserPool

provider:
  name: aws
  profile: ${file(./config/aws_params.yml):profile}
  region: ${file(./config/aws_params.yml):region}
  stage: ${file(./config/aws_params.yml):stage}
  tags: 
    env: ${file(./config/aws_params.yml):stage}
  memorySize: 1536
  stackTags: 
    projectname: swiftmile
  deploymentBucket: us.fiduciam.nkcgo.api.deploys
  versionFunctions: true
  runtime: nodejs4.3
  # apiKeys:
  #   - myFirstKey
  #   - ${opt:stage}-myFirstKey
  #   - ${env:MY_API_KEY} # you can hide it in a serverless variable
  # usagePlan:
  #   quota:
  #     limit: 5000
  #     offset: 2
  #     period: MONTH
  #   throttle:
  #     burstLimit: 200
  #     rateLimit: 100
  environment:
    DYNAMODB_TABLE: ${self:service}-prod
    # DYNAMODB_DEVICE_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Device
#    DYNAMODB_USER_TABLE: ${self:service}-${opt:stage, self:provider.stage}-User
#    DYNAMODB_VENUE_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Venue
#    DYNAMODB_FAQ_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Faq
#    DYNAMODB_SNAP_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Snap
#    DYNAMODB_BADGE_TABLE: ${self:service}-${opt:stage, self:provider.stage}-Badge
    DYNAMODB_USER_TABLE: ${self:service}-prod-User
    DYNAMODB_VENUE_TABLE: ${self:service}-prod-Venue
    DYNAMODB_FAQ_TABLE: ${self:service}-prod-Faq
    DYNAMODB_SNAP_TABLE: ${self:service}-prod-Snap
    DYNAMODB_BADGE_TABLE: ${self:service}-prod-Badge

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_USER_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_VENUE_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_FAQ_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_SNAP_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_BADGE_TABLE}"
  stackPolicy: 
    - Effect: Allow
      Principal: "*"
      Action: "Update:*"
      Resource: "*"
    - Effect: Deny
      Principal: "*"
      Action:
        - Update:Replace
        - Update:Delete
      Condition:
        StringEquals:
          ResourceType:
            - AWS::EC2::Instance

functions: ${file(./config/functions.yml):functions}
#resources: ${file(./config/resources.yml):resources}